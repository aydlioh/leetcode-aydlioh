import fs from 'fs';
import path from 'path';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const createFile = (filePath, content) => {
  fs.writeFileSync(filePath, content, 'utf8');
};

const askQuestion = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

(async () => {
  try {
    console.log(`\x1b[34m\x1b[1müõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∑–∞–¥–∞—á–µ–π\x1b[0m`);

    const taskNumber = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ');
    const taskName = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ');

    if (!taskNumber || !taskName) {
      console.error('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.');
      process.exit(1);
    }

    const folderName = `${taskNumber}_${taskName}`;
    const folderPath = path.join(__dirname, 'tasks', folderName);

    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath, { recursive: true });
    }

    createFile(path.join(folderPath, `${taskNumber}.ts`), ``);
    createFile(
      path.join(folderPath, `${taskNumber}.test.ts`),
      `import { describe, it, expect } from "vitest";\n\ndescribe("${taskNumber} - ${taskName}", () => {\n  it("...", () => {});\n});`
    );

    console.log(`\x1b[32m‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\x1b[0m`);
  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  } finally {
    rl.close();
  }
})();
